; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

; Function Attrs: nounwind
define void @add_kernel_0d1d2d3d(float addrspace(1)* %0, float addrspace(1)* %1, float addrspace(1)* %2, i32 %3) local_unnamed_addr #0 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
  %6 = shl i32 %5, 2
  %7 = and i32 %6, 1020
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
  %9 = shl i32 %8, 10
  %10 = or i32 %7, %9
  %11 = or i32 %9, 512
  %12 = add i32 %11, %7
  %13 = icmp slt i32 %10, %3
  %14 = icmp slt i32 %12, %3
  %15 = sext i32 %10 to i64
  %16 = getelementptr float, float addrspace(1)* %0, i64 %15
  %17 = sext i32 %12 to i64
  %18 = getelementptr float, float addrspace(1)* %0, i64 %17
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(float addrspace(1)* %16, i1 %13) #0
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0
  %21 = bitcast i32 %20 to <1 x float>
  %22 = extractvalue { i32, i32, i32, i32 } %19, 1
  %23 = bitcast i32 %22 to <1 x float>
  %24 = extractvalue { i32, i32, i32, i32 } %19, 2
  %25 = bitcast i32 %24 to <1 x float>
  %26 = extractvalue { i32, i32, i32, i32 } %19, 3
  %27 = bitcast i32 %26 to <1 x float>
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(float addrspace(1)* %18, i1 %14) #0
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0
  %30 = bitcast i32 %29 to <1 x float>
  %31 = extractvalue { i32, i32, i32, i32 } %28, 1
  %32 = bitcast i32 %31 to <1 x float>
  %33 = extractvalue { i32, i32, i32, i32 } %28, 2
  %34 = bitcast i32 %33 to <1 x float>
  %35 = extractvalue { i32, i32, i32, i32 } %28, 3
  %36 = bitcast i32 %35 to <1 x float>
  %37 = getelementptr float, float addrspace(1)* %1, i64 %15
  %38 = getelementptr float, float addrspace(1)* %1, i64 %17
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(float addrspace(1)* %37, i1 %13) #0
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0
  %41 = bitcast i32 %40 to <1 x float>
  %42 = extractvalue { i32, i32, i32, i32 } %39, 1
  %43 = bitcast i32 %42 to <1 x float>
  %44 = extractvalue { i32, i32, i32, i32 } %39, 2
  %45 = bitcast i32 %44 to <1 x float>
  %46 = extractvalue { i32, i32, i32, i32 } %39, 3
  %47 = bitcast i32 %46 to <1 x float>
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(float addrspace(1)* %38, i1 %14) #0
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0
  %50 = bitcast i32 %49 to <1 x float>
  %51 = extractvalue { i32, i32, i32, i32 } %48, 1
  %52 = bitcast i32 %51 to <1 x float>
  %53 = extractvalue { i32, i32, i32, i32 } %48, 2
  %54 = bitcast i32 %53 to <1 x float>
  %55 = extractvalue { i32, i32, i32, i32 } %48, 3
  %56 = bitcast i32 %55 to <1 x float>
  %57 = fadd <1 x float> %21, %41
  %58 = fadd <1 x float> %23, %43
  %59 = fadd <1 x float> %25, %45
  %60 = fadd <1 x float> %27, %47
  %61 = fadd <1 x float> %30, %50
  %62 = fadd <1 x float> %32, %52
  %63 = fadd <1 x float> %34, %54
  %64 = fadd <1 x float> %36, %56
  %65 = getelementptr float, float addrspace(1)* %2, i64 %15
  %66 = getelementptr float, float addrspace(1)* %2, i64 %17
  %bc = bitcast <1 x float> %57 to <1 x i32>
  %67 = extractelement <1 x i32> %bc, i64 0
  %bc1 = bitcast <1 x float> %58 to <1 x i32>
  %68 = extractelement <1 x i32> %bc1, i64 0
  %bc2 = bitcast <1 x float> %59 to <1 x i32>
  %69 = extractelement <1 x i32> %bc2, i64 0
  %bc3 = bitcast <1 x float> %60 to <1 x i32>
  %70 = extractelement <1 x i32> %bc3, i64 0
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %67, i32 %68, i32 %69, i32 %70, float addrspace(1)* %65, i1 %13) #0
  %bc4 = bitcast <1 x float> %61 to <1 x i32>
  %71 = extractelement <1 x i32> %bc4, i64 0
  %bc5 = bitcast <1 x float> %62 to <1 x i32>
  %72 = extractelement <1 x i32> %bc5, i64 0
  %bc6 = bitcast <1 x float> %63 to <1 x i32>
  %73 = extractelement <1 x i32> %bc6, i64 0
  %bc7 = bitcast <1 x float> %64 to <1 x i32>
  %74 = extractelement <1 x i32> %bc7, i64 0
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %71, i32 %72, i32 %73, i32 %74, float addrspace(1)* %66, i1 %14) #0
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

attributes #0 = { nounwind }
attributes #1 = { nofree nosync nounwind readnone speculatable }

!nvvm.annotations = !{!0, !1, !0}

!0 = !{void (float addrspace(1)*, float addrspace(1)*, float addrspace(1)*, i32)* @add_kernel_0d1d2d3d, !"kernel", i32 1}
!1 = !{void (float addrspace(1)*, float addrspace(1)*, float addrspace(1)*, i32)* @add_kernel_0d1d2d3d, !"maxntidx", i32 128}
